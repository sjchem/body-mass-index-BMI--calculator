# -*- coding: utf-8 -*-
"""body mass index (BMI) calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wx5bPBQDxiXhGLvkRTmAU5jDiFlCGYMI
"""

import streamlit as st
import plotly.graph_objects as go


# BMI calculation function
def calculate_bmi(height_cm, weight_kg):
    """Calculates BMI and returns value + category."""
    if height_cm <= 0:
        raise ValueError("Height must be greater than zero.")
    if weight_kg <= 0:
        raise ValueError("Weight must be greater than zero.")

    height_m = height_cm / 100
    bmi = weight_kg / (height_m ** 2)

    if bmi <= 16:
        category = "Severely Underweight 😟"
        color = "red"
    elif bmi <= 18.5:
        category = "Underweight 🙁"
        color = "orange"
    elif bmi <= 25:
        category = "Healthy 😊"
        color = "green"
    elif bmi <= 30:
        category = "Overweight 😐"
        color = "orange"
    else:
        category = "Obesity 😟"
        color = "red"

    return round(bmi, 2), category, color

# Streamlit page configuration
st.set_page_config(
    page_title="BMI Calculator 🧮",
    page_icon="💪",
    layout="centered",
)
# Page title
st.title("💪 Body Mass Index (BMI) Calculator")
st.markdown("### Check your health category and visualize your BMI on a gauge chart.")

# Sidebar info
st.sidebar.header("ℹ️ About")
st.sidebar.info(
    "This interactive BMI calculator helps you understand your weight category "
    "based on the World Health Organization (WHO) classification."
)

# User input
st.markdown("#### Enter your details below:")
height_cm = st.number_input("📏 Height (in centimeters):", min_value=0.0, max_value=250.0, step=0.1)
weight_kg = st.number_input("⚖️ Weight (in kilograms):", min_value=0.0, max_value=300.0, step=0.1)

# Gauge chart function
def create_bmi_gauge(bmi):
    """Creates a Plotly gauge chart for BMI visualization."""
    fig = go.Figure(
        go.Indicator(
            mode="gauge+number",
            value=bmi,
            title={"text": "Your BMI"},
            gauge={
                "axis": {"range": [0, 40]},
                "bar": {"color": "black"},
                "steps": [
                    {"range": [0, 16], "color": "#ffcccc"},
                    {"range": [16, 18.5], "color": "#ffd699"},
                    {"range": [18.5, 25], "color": "#b3ffb3"},
                    {"range": [25, 30], "color": "#ffe680"},
                    {"range": [30, 40], "color": "#ff9999"},
                ],
                "threshold": {
                    "line": {"color": "black", "width": 4},
                    "thickness": 0.75,
                    "value": bmi,
                },
            },
        )
    )
    fig.update_layout(height=400, margin=dict(l=30, r=30, t=50, b=0))
    return fig

# Calculate BMI on button click
if st.button("Calculate BMI 🧮"):
    try:
        bmi_value, category, color = calculate_bmi(height_cm, weight_kg)

        # Display results
        st.success(f"### 🩺 Your BMI is: **{bmi_value}**")
        st.markdown(f"<h4 style='color:{color};font-weight:bold;'>{category}</h4>", unsafe_allow_html=True)

        # Show BMI gauge chart
        gauge_fig = create_bmi_gauge(bmi_value)
        st.plotly_chart(gauge_fig, use_container_width=True)

        # Health feedback
        if "Healthy" in category:
            st.balloons()
            st.info("🎉 Great! Maintain a balanced diet and regular exercise!")
        elif "Underweight" in category:
            st.warning("🍎 Consider a nutritious diet to reach a healthy weight.")
        elif "Overweight" in category or "Obesity" in category:
            st.error("🏃 Try regular exercise and a healthy diet to reach your ideal BMI.")

    except ValueError as e:
        st.error(f"❌ {e}")

# Footer
st.markdown("---")
st.caption("Made with ❤️ by Santanu - Chemistry meets Python 🧪")